// Mocks generated by Mockito 5.4.2 from annotations
// in tree_view_example/test/core/helpers/app_bloc_observer_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:bloc/bloc.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [BlocBase].
///
/// See the documentation for Mockito's code generation for more information.
class MockBlocBase<State> extends _i1.Mock implements _i2.BlocBase<State> {
  MockBlocBase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  State get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i3.dummyValue<State>(
          this,
          Invocation.getter(#state),
        ),
      ) as State);
  @override
  _i4.Stream<State> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i4.Stream<State>.empty(),
      ) as _i4.Stream<State>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);
  @override
  void emit(State? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onChange(_i2.Change<State>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [Change].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockChange<State> extends _i1.Mock implements _i2.Change<State> {
  MockChange() {
    _i1.throwOnMissingStub(this);
  }

  @override
  State get currentState => (super.noSuchMethod(
        Invocation.getter(#currentState),
        returnValue: _i3.dummyValue<State>(
          this,
          Invocation.getter(#currentState),
        ),
      ) as State);
  @override
  State get nextState => (super.noSuchMethod(
        Invocation.getter(#nextState),
        returnValue: _i3.dummyValue<State>(
          this,
          Invocation.getter(#nextState),
        ),
      ) as State);
}
